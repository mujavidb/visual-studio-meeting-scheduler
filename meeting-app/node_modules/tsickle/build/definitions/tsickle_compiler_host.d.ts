import * as ts from 'typescript';
import { ModulesManifest } from './modules_manifest';
export declare enum Pass {
    None = 0,
    DecoratorDownlevel = 1,
    Tsickle = 2,
}
export interface TsickleCompilerHostOptions {
    googmodule: boolean;
    es5Mode: boolean;
    tsickleTyped: boolean;
    prelude: string;
}
export interface TsickleEnvironment {
    /**
     * If true, tsickle and decorator downlevel processing will be skipped for
     * that file.
     */
    shouldSkipTsickleProcessing: (fileName: string) => boolean;
    /**
     * Takes a context (the current file) and the path of the file to import
     *  and generates a googmodule module name
     */
    pathToModuleName: (context: string, importPath: string) => string;
    /**
     * Tsickle treats warnings as errors, if true, ignore warnings.  This might be
     * useful for e.g. third party code.
     */
    shouldIgnoreWarningsForPath: (filePath: string) => boolean;
    /**
     * If we do googmodule processing, we polyfill module.id, since that's
     * part of ES6 modules.  This function determines what the module.id will be
     * for each file.
     */
    fileNameToModuleId: (fileName: string) => string;
}
/**
 * TsickleCompilerHost does tsickle processing of input files, including
 * closure type annotation processing, decorator downleveling and
 * require -> googmodule rewriting.
 */
export declare class TsickleCompilerHost implements ts.CompilerHost {
    private delegate;
    private options;
    private environment;
    private oldProgram;
    private pass;
    private ANNOTATION_SUPPORT;
    modulesManifest: ModulesManifest;
    /** Error messages produced by tsickle, if any. */
    diagnostics: ts.Diagnostic[];
    /** externs.js files produced by tsickle, if any. */
    externs: {
        [fileName: string]: string;
    };
    constructor(delegate: ts.CompilerHost, options: TsickleCompilerHostOptions, environment: TsickleEnvironment, oldProgram?: ts.Program, pass?: Pass);
    reconfigureForRun(program: ts.Program, pass: Pass): void;
    getSourceFile(fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void): ts.SourceFile;
    writeFile(fileName: string, content: string, writeByteOrderMark: boolean, onError?: (message: string) => void, sourceFiles?: ts.SourceFile[]): void;
    convertCommonJsToGoogModule(fileName: string, content: string): string;
    private runDecoratorDownlevel(sourceFile, program, fileName, languageVersion);
    private runTsickle(sourceFile, program, fileName, languageVersion);
    /** Concatenate all generated externs definitions together into a string. */
    getGeneratedExterns(): string;
    fileExists(fileName: string): boolean;
    getCurrentDirectory(): string;
    useCaseSensitiveFileNames(): boolean;
    getNewLine(): string;
    getDirectories(path: string): string[];
    readFile(fileName: string): string;
    getDefaultLibFileName(options: ts.CompilerOptions): string;
    getCanonicalFileName(fileName: string): string;
}
